<html>
<head>
    <title>IFT3911 DM2</title>
    <style type="text/css">
        table
        {
            border: outset 2px black;
            border-collapse: collapse;
        }
        th
        {
            border-bottom: double 2px black;
        }
        td
        {
            border-bottom: solid 1px black;
        }
        .first_col
        {
            border-right: double 2px black;
        }
    </style>
</head>
<body>
    <h1 style="text-align: center;">
        IFT 3911 - Devoir 2</h1>
    <h2>
        Information générale</h2>
    <p>
        <span style="font-weight: bold;">Nom: </span>Christophe Apollon-Roy
        <br />
        <span style="font-weight: bold;">Matricule: </span>920403
        <br />
        <span style="font-weight: bold;">Courriel: </span>christophe.apollon-roy@umontreal.ca
        <br />
        <span style="font-weight: bold;">temps mis: </span>36 heures
    </p>
    <p>
        <span style="font-weight: bold;">Nom: </span>Fahirah Diarra
        <br />
        <span style="font-weight: bold;">Matricule: </span>20034025
        <br />
        <span style="font-weight: bold;">Courriel: </span>fahirah-baba-muaka.diarra@umontreal.ca
        <br />
        <span style="font-weight: bold;">temps mis: </span>36 heures
    </p>
    <h2>
        Distribution des tâches</h2>
    <p>
        <span style="font-weight: bold;">Soumetteur: </span>Christophe Apollon-Roy
    </p>
    <table cellpadding="7px">
        <thead>
            <tr>
                <th class="first_col">
                    Tâche
                </th>
                <th>
                   Christophe
                </th>
                <th>
                    Fahirah
                </th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td class="first_col">
                    Design du logiciel
                </td>
                <td>
                    Diagramme de classes, Diagramme de paquets, contraintes OCL (50%)
                </td>
                <td>
                    Diagrammes de séquence (50%)
                </td>
            </tr>
            <tr>
                <td class="first_col">
                    Qualité du design
                </td>
                <td>
                    Justifications (50%) 
                </td>
                <td>
                    Justifications (50%)
                </td>
            </tr>
        </tbody>
    </table>
    <h2>
        Hypothèses</h2>
    <p>
        Nous avons supposé que le système serait constitué d'une interface interagissant avec l'usager (client ou admin) pour accéder à une base 
        de données.        
        Nous avons supposé que chaque distributeur a au moins un véhicule de transport (avion, train ou paquebot) dans sa flotte.        
        Nous avons supposé que toute section d'un véhicule de transport est non-vide. 
        Nous avons supposé qu'il n'y a qu'un seul véhicule de transport effectuant un certain voyage à une certaine heure (exemple, le vol LEET1337, disponible à 13h, 16h, et 22h est effectué par l'avion GIT1 à 13h, GUD2 à 16h et SCRUB3 à 22h).
        Nous avons supposé que le système limite le nombre de réservations non payées à une par client.
        Étant donné que ce n'était pas spécifié, nous avons assumé qu'un client a jusqu'à 24h avant le départ pour réserver une place dans un voyage.
        Nous avons supposé que, comme tout bon système de réservation/achat en ligne, que le client peut utiliser le système et réserver/payer une place sans s'authentifier ou s'inscrire.
        Nous avons supposé que l'administrateur doit s'authentifer pour avoir accès aux fonction d'administration et que seul l'administrateur peut avoir accès aux fonctions d'administration (création/modification/suppression de destination, distributeurs, itinéraires).
    </p>
    <h2>
        Tâche 1</h2>
    <p>
        Design du logiciel
    </p>
    <ul>
        <li>Fichiers: <a href="ClassDiagram.vpp">Diagramme de classes</a>, <a href="DSS2_part2.vpp">Diagrammes de séquence</a>, <a href="PackageDiagram.vpp">Diagramme de paquets</a></li>        
        <li>Le projet DSS2_part2.vpp contient tous les diagrammes de séquence, il suffit d'utiliser le navigateur de projet dans la barre de tâches à gauche de la fenêtre de Visual Paradigm ou le "Project Browser" dans le menu "View" de Visual Paradigm.</li>
    </ul>
    <img src="DiagrammedeClasses.jpg" width="900px" alt="Diagramme de classes" />
    <ul>        
        <li>Les parties réutilisables sont les classes suivantes: View, Control, InterfaceUsager, OutilsAdmin, Destination, Distributeur, Parcours, Voyage, Transport, Section, Place, Reservation, Confirmation. Elles contiennent les attributs et méthodes de base pour pouvoir gérer les réservations pour un système de transport quelconque. Idéalement, il aurait fallu extraire des interfaces de ces classes, mais nous voulions que notre programme soit réutilisable au point d'être exécutable et utilisable pour un autre système de réservation sans aucune modification des parties réutilisables.</li>
        <li>Étant donné que le système doit interagir avec un usager et imprimer des informations à l'écran, nous avons décidé d'implémenter un modèle MVC rudimentaire: View se charge d'afficher de l'information, Control reçoit les entrées de l'usager et délègue le traitement de l'entrée à la méthode/au module approprié et InterfaceUsager (avec sa sous-classe OutilsAdmin) fait office de modèle et ainsi contient toutes les méthodes et données requises pour répondre aux besoins de l'usager.</li>
        <li>Selon les besoins du DM2, les itinéraires de paquebot et les trajets de train sont structurellement et fonctionnellement identiques, donc, à première vue, il serait mieux d'utiliser une seule classe "Itinéraire" pour représenter les itinéraires de paquebots et les itinéraires de train au lieu de nos 2 classes "DescriptionCroisiere" et "DescriptionTrajet". Par contre, la distinction est importante pour s'assurer que les instances liées aux itinéraires de croisières ne contiennent que des instances liées aux croisières (paquebot, cabine, etc), et de même pour les itinéraires de train.</li>
        <li>Veuillez noter que, par souçi d'une utilisation efficace de la mémoire dans l'implémentation future, au lieu de stocker chaque information du client dans un attribut string différent dans Confirmation, nous avons décidé de les concaténer en un seul objet String (infoClient) où chaque information est délimitée par un séparateur. Pour récuperer une information spécifique, il suffit d'appeler la méthode split sur l'objet String et accéder au tableau de string ainsi généré.</li>
    </ul>
    <img src="DiagrammePaquets.jpg" width="900px" alt="Diagramme de Paquets" />
    <ul>        
        <li>Ici, nous avons appliqué le Acyclic Dependency Principle; il n'y a pas de cycle formé par les dépendances entre les paquets Interface, Destination, Compagnies et Réservation. Nous avons appliqué le Common Reuse Principle pour la ségrégation des classes en différents paquets, par exemple: View, Control, InterfaceUsager et OutilsAdmin doivent coopérer pour interagir avec l'usager, donc nous les avons réunies dans le paquet Interface.</li>
    </ul>
    <img src="VerificationParcours.jpg" width="900px" alt="Diagramme de séquence de la consultation de vols" />
    <ul>        
        <li>L'usager choisit de vérifier les vols disponibles. Le diagramme illustre le comportement du système après que le contrôleur (Control) ait averti l'instance d'InterfaceUsager d'appeler la méthode findParcours().</li>
        <li>Nous n'avions pas besoin de faire un diagramme différent pour les vols d'avions, itinéraires de paquebot et trajets de train car, par souci de réutilisabilité, findParcours() n'utilise que des méthodes et attributs présents dans les modules réutilisables (Distributeur, Parcours et Voyage dans ce cas-ci) tout en satisfaisant les besoins dans l'énoncé (après avoir trouvé les instances de Distributeur, Parcours, Voyage et Transport demandées, l'instance d'InterfaceUsager a toutes les informations requises pour donner tous les détails demandés).</li>
    </ul>
    <img src="Reserver.jpg" width="900px" alt="Diagramme de séquence de Réservation" />
    <ul>        
        <li>L'usager choisit de réserver une place disponible dans un voyage. Le diagramme illustre le comportement du système après que le contrôleur (Control) ait averti l'instance d'InterfaceUsager d'appeler la méthode createReservation().</li>
        <li>Nous n'avions pas besoin de faire un diagramme différent pour la réservation de siège ou cabine car, createReservation() n'utilise que des méthodes et attributs présents dans les modules réutilisables. De plus, pour gérer correctement les différences de délais de modification/annulation en siège (24h) et cabine (72h), l'attribut delai de l'instance de Reservation sera initialisé à la valeur appropriée selon la classe (siege ou cabine) de l'instance à laquelle la réservation sera associée.</li>
    </ul>
    <img src="Payer.jpg" width="900px" alt="Diagramme de séquence de Paiement" />
    <ul>        
        <li>L'usager choisit de payer la place qu'il a réservée. Le diagramme illustre le comportement du système après que le contrôleur (Control) ait averti l'instance d'InterfaceUsager d'appeler la méthode pay().</li>
        <li>Nous n'avions pas besoin de faire un diagramme différent pour le paiement d'un siège ou d'une cabine car, pay() n'utilise que des méthodes et attributs présents dans Reservation et Confirmation, donc les différences entre les sièges et cabines n'ont pas d'importance dans ce cas-ci.</li>
    </ul>
    <img src="ModifierReservation.jpg" width="900px" alt="Diagramme de séquence de Modification de Réservation" />
    <ul>        
        <li>L'usager choisit de modifier sa réservation. Le diagramme illustre le comportement du système après que le contrôleur (Control) ait averti l'instance d'InterfaceUsager d'appeler la méthode modifierReservation().</li>
        <li>Nous n'avions pas besoin de faire un diagramme différent pour la modification de la réservation d'un siège ou d'une cabine car, grâce à la réutilisabilité de Reservation, le processus reste le même peut importe de délai de modification de réservation imposé par le type de place réservé.</li>
    </ul>
    <img src="AnnulerReservation.jpg" width="900px" alt="Diagramme de séquence d'Annulation de Réservation" />
    <ul>        
        <li>L'usager choisit d'annuler sa réservation. Le diagramme illustre le comportement du système après que le contrôleur (Control) ait averti l'instance d'InterfaceUsager d'appeler la méthode supprimerReservation().</li>
        <li>Nous n'avions pas besoin de faire un diagramme différent pour l'annulation de la réservation d'un siège ou d'une cabine car, grâce à la réutilisabilité de Reservation, le processus reste le même peut importe de délai de modification d'une réservation imposé par le type de place réservé.</li>
    </ul>
    <h3>Contraintes OCL</h3>
    <h4>Le port de départ et d'arrivée sont identiques, l'itinéraire ne doit pas durer plus de 21 jours</h4>        
    <p>context DescriptionCroisiere <br/>inv: self.destinationDepart = self.destinationArrivee()
    <br/>inv: self.Voyage->forAll(dateHeureArrivee - dateHeureDepart <= (21*24*60*60))</p>
    <p>/*étant donnée que nos dates sont en timestamp, il faut comparer le résultat à la durée de 21 jours en secondes*/</p>
    <h4>Un paquebot peut être assigné à plusieurs itinéraires tant qu'ils ne se chevauchent pas</h4>        
    <p>context CompagnieCroisiere <br/>def allVoyage:set(Voyage) = self.DescriptionCroisiere.Voyage 
    <br/>inv: allVoyage->forAll(v:Voyage | v.dateHeureDepart &#60 v.dateHeureArrivee) 
    <br/>inv: allVoyage->forAll( v1: Voyage, v2:Voyage | if v1.Paquebot = v2.Paquebot then v1.dateHeureDepart &#62 v2.dateHeureArrivee or v1.dateHeureArrivee &#60 v2.dateHeureDepart)</p>    
    <p>/*on confirme que tous les voyages ont une heure d'arrivée après l'heure de départ et ensuite on confirme que toutes les paires possibles de voyages utilisant le même paquebot n'ont pas de chevauchement en vérifiant que le premier voyage part après le deuxième et vice-versa*/</p>
    <h4>Réserver ne peut se faire que pour un siège/cabine libre</h4>        
    <p>context Place::setReservation(reservation:Reservation)<br/>pre: self.Reservation->size() = 0<br/>post: self.Reservation->size() = 1</p>
    <p>/*Siege et Cabine utilisent la même opération que leur classe mère, Place, pour l'assignation d'une réservation, donc la mise à jour revient à tout simplement changer le contexte de la contrainte*/</p>
    <h2>Tâche 2</h2>
    <p>
        Qualité du design
    </p>
    <h3>Couplage et Cohésion</h3>   
    <ul>
    <li>En général, le design introduit du couplage seulement lorsque c'est absolument nécéssaire. En effet, la majorité des cas de couplage sont des cas de couplage par données (par exemple, Reservation recoit uniquement les données spécifiques de Distributeur et Parcours qu'elle a besoin lors de son instanciation) ou couplage par paquet (exemple: Voyage contient comme attribut une instance de Transport, lui donnant possiblement accès à toutes ses données, Place.setReservation prend en paramètre une instance de Reservation). Étant donné l'usage du modèle MVC par notre design, nous n'avions pas le choix d'introduire du couplage par contrôle entre Control, View et InterfaceUsager pour gérer correctement les besoins de l'usager.</li>
    <li>Notre design a une forte cohésion de classes car les attributs de celles-ci sont toujours des classes qui leur sont intrinsèques et de même domaine (par exemple, Distributeur a comme attributs une liste de Transports et de Parcours qui lui sont intrinsèques et ces 3 classes font toutes parties du domaine de métier). La seule exception à cela est la classe InterfaceUsager (domaine application) qui contient comme attributs une instance de View (domaine architecture) et des listes de Destinations, Parcours et Reservations (domaine métier). Par contre, à cause du modèle MVC, View est intrinsèque à InterfaceUsager (le Modèle doit pouvoir mettre à jour la Vue), de même pour Destination, Parcours et Distributeur car elles représentent les données que le Modèle doit manipuler, donc, malgré les apparences, InterfaceUsager ne présente fait pas l'erreur d'avoir de la cohésion de domaine ou de rôle mixtes.</li>
    <li>Les classes Confirmation, Réservation, Place, Section, Transport, Destination, Parcours et Distributeurs font toutes preuve de cohésion informationnelle par leurs méthodes. En effet elles servent de "structures de données" pour le système et ainsi, leurs méthodes sont majoritairement des "getters" et "setters" servant à la manipulation et l'obtention des informations qu'elles contiennent. Les méthodes d'InterfaceUsager (et, par extension, OutilsAdmin) font preuve de cohésion communicationnelle: createReservation, findReservation, et supprimerReservation opèrent toutes majoritairement sur des instances de Reservation, par exemple. Cette même classe présente aussi de la cohésion procédurale; modifierReservation devra appeler findParcours pour fournir au client une liste de sièges disponibles avant procéder à la modification de la réservation de celui-ci, par exemple. Enfin, les méthodes d'InterfaceUsager présentent aussi de la cohésion logique (findParcours, findDestination, findDistributeur, findReservation), ce qui est inévitable car InterfaceUsager doit pouvoir rechercher les données demandées par le client. Les classes View et Control font preuve de cohésion fonctionnelle car leurs méthodes ne font qu'une seule tâche (View.display affiche des informations à l'écran, Control.listen et Control.notify se chargent de la gestion des interactions avec l'usager).</li>
    <li>Après cette analyse, nous pouvons conclure que le design, même s'il est loin d'être parfait, reste quand même bon car le couplage et la cohésion sont en équilibre. En effet, les classes faisant peu de tâches (les "données"; paquets Destination, Reservation et Compagnie) ont très peu de couplage et beaucoup de cohésion tandis que les classes effectuant la majeure partie des opérations du système poour répondre aux demandes de l'usager (InterfaceUsager/OutilsAdmin) présentent comparativement plus de couplage et moins de cohésion (sans pour autant n'avoir que du couplage sans cohésion ou vice-versa).</li>
    </ul>
    <h3>Fardeau</h3>
    <h4>Calculs</h4>        
    <p>Étant donné que la classe dateTime est essentiellement un timestamp qui nous est fourni par l'API JodaTime, nous la considèrerons comme une classe de fondation pour nos besoins. Étant donné que la majorité des sous-classes définies ne diffèrent pas grandement de leur classe mère. Dans la majorité des cas, les sous-classes ne font qu'ajouter un attribut appartenant au domaine de fondation. Donc, nous nous en sommes tenus aux classes mères et les classes réutilisables par d'autres systèmes de réservation pour le calcul, pour rester bref.</p>
    <ul>
    <li><p>Domaine de fondation <br/> F(int) = 0 <br/> F(String) = 0 <br/> F(dateTime) = 0</p></li>
    <li><p>Domaine d'architecture <br/> F(View) = |{String}| = 1</p></li>
    <li><p>Domaine de métier <br/> F(Destination) = |{String}| = 1 <br/> F(Confirmation) = |{String}| = 1 <br/> F(Reservation) = F(confirmation)+|{Confirmation, String, int, dateTime}| = 5 <br/> F(Place) = F(Reservation) + |{Reservation}| = 6 <br/> F(Section) = F(Place) + |{Place, int}| = 8 <br/> F(transport) = F(Section) + |{section, int}| = 10 <br/> F(Voyage) = F(Transport) + |{Transport, int}| = 12 <br/> F(Parcours) = F(Voyage) + F(Destination) + |{Voyage, Destination, int, String}| = 17 <br/> F(Distributeur) = F(Parcours) + F(Transport) + |{Parcours, Transport, int, String}| = 31 </p></li>
    <li>Domaine d'application <br/> F(InterfaceUsager) = F(Distributeur) + F(Destination) + F(Reservation) + F(View) + |{Distribution, Destination, Reservation, View}| = 42 <br/> F(Control) = F(InterfaceUsager) + |{InterfaceUsager}| = 43</li>
    </ul>
    <p>Nous pouvons constater que plus on s'éloigne du domaine de fondation et qu'on s'approche du domaine d'application, plus le fardeau augmente, ce qui nous permet de conclure que le fardeau est bien réparti à travers les domaines. Ceci est une bonne indication que notre design a un degré couplage et de cohésion raisonnables.</p>    
    <h3>Graphe IA</h3>
    <img src="DiagrammeIA.jpg" width="900px" alt="Diagramme de séquence d'Annulation de Réservation" />
    <h4>calculs</h4>        
    <ul>
    <li>Destination: 4 classes dans Compagnie et 2 dans Interface en dépendent donc I = 0/(4+2) = 0, A = 0 car Destination n'a aucune classe abstraite</li>
    <li>Reservation: 3 classes dans Compagnie et 2 dans Interface en dépendent donc I = 0/(3+2) = 0, A = 0 car Reservation n'a aucune classe abstraite</li>
    <li>Compagnie: 2 classes dans Interface en dépendent et possède 7 classes dépendant d'autres paquets donc I = 7/(7+2) = 0.78, A = 0 car Compagnie n'a aucune classe abstraite</li>
    <li>Interface: possède 2 classes dépendant d'autres paquets donc I = 2/2 = 1, A = 0 car Interface n'a aucune classe abstraite</li>
    </ul>
    <h4>Discussion du graphe</h4>
    <p>Notre paquet Interface est idéal comme point d'entrée du programme (méthode main), car sa valeur de Distance est 0 et sa valeur A est 0; c'est ce qu'on veut vu qu'Interface doit se charger des interactions avec l'usager. Compagnie s'approche aussi de cet "idéal" avec une valeur D de 0.22 et A = 0. Par contre Reservation et Destination sont loin d'être idéaux avec leur valeurs D de 1 et A de 0. Ceci est probablement causé par le fait que les classes de ces paquets sont instantiables, par souci de réutilisabilité sans aucune extension (nous voulions un programme "usable right out of the box"). Extraire une interface des classes mère dans ces 2 paquets aurait peut-être pu alléger ce problème.</p>
    <h3>Application des principes de conception</h3>
    <h4>Application des principes SOLID</h4>        
    <ul>
    <li>Notre design applique systèmatiquement de Single Responsibility principle. En effet, la création de sous-classes pour nos modules réutilisables n'est causée que par la prise en charge d'une seule nouvelle responsabilité: chaque sous-type de compagnie a été créée pour prendre en charge un type spécifique de produit (ex.: vente de croisières), chaque sous-type de Section est créée pour prendre en charge un type de tarif spécifique, chaque sous-type de parcours existe pour la description d'un type d'itinéraire spécifique (croisière, vol ou trajet), la sous-classe OutilsAdmin doit son existence au fait qu'elle a la responsabilité de fournir les fonctionalités d'administrateur.</li>
    <li>Notre design n'applique pas exactement le Open/Close principle. Tel qu'expliqué dans notre discussion du SRP, nous procédons systématiquement à l'extension pour changer le comportement de nos classes. Par contre, ces extensions sont faites sur des classes concrètes, ce qui viole une des conditions de l'OCP.</li>
    <li>Notre design respecte aussi le principe de subsitution de Liskov. Étant donné qu'aucunes de nos sous-classes ne redéfinissent les méthodes de leur classe mère, toutes nos sous-classes sont garanties d'être conformes aux spécifications de leur classe mère.</li>
    <li>Malheureusement, nous n'appliquons pas très fidèlement de Dependency Inversion Principle. Étant donné que nous voulions que notre design soit le plus général possible (essentiellement, utilisable/fonctionnel sans aucune extension des modules réutilisables), il a fallu que les modules réutilisables soient des classes concrètes (donc instantiables et utilisables par le système). Malheureusement, ces modules sont les classes mères des modules spécifiques aux besoins de ce scénario.</li>
    <li>Le Interface Segregation Principle n'est pas applicable à notre situation vu que notre design n'utilise pas d'interfaces (ou de classes abstraites). Une malheureuse conséquence de notre non-respect du DIP.</li>
    </ul>
    <h4>Application des principes de couplage de paquets</h4>
    <ul>
    <li>Notre design applique le Acyclic Dependency Principle, car les dépendances entre nos paquets ne créent aucun cycle.</li>
    <li>Notre design applique le Stable Dependencies Principle, car nos paquets dépendent uniquement de paquets plus stables. En effet, nous voyons qu'Interface (I=1) dépend de Compagnie (I=0,78), Destination (I=0) et Reservation (I=0) (tous des paquets plus stables qu'Interface) et que Compagnie (I=0,78) dépend de Destination (I=0) et Reservation (I=0) (encore des paquets plus stables que Compagnie).</li>
    <li>Notre design n'est pas fidèle au Abstract Dependencies Principle, car nos paquets les plus stables (Destination et Reservation) n'ont que des classes concrètes. Une malheureuse conséquence de notre non-respect du DIP.</li>
    </ul>
    <h4>Application des principes de cohésion de paquets</h4>
    <ul>
    <li>Notre design applique en partie le Release Reuse Equivalency Principle. En effet, 2 (Interface, Reservation) de nos 4 paquets sont réutilisables en entier. Malheureusement, à cause des sous-classes spécifique au scénario du DM2 ajoutées aux paquets Destination et Compagnie, ceux-ci ne pourraient peut-être pas être réutilisables dans toutes les situations où un système de gestion de réservation serait requis.</li>
    <li>Notre design applique le Common Reuse Principle, car nos paquets ne contiennent que des classes faisant preuve de cohésion fonctionnelle (en d'autres mots, des classes ayant des fonctions reliées). Par exemple, le paquet Interface ne contient que des classes ayant des méthodes et attributs liées aux interactions avec l'usager: View est responsable de l'affichage d'informations à l'écran de l'usager, Control reçoit les entrées de l'usager et en averti InterfaceUsager qui s'occupe d'exécuter l'action demandée. Le paquet Compagnie ne contient que des classes décrivant les différents itinéraires offerts par une compagnie ainsi que les transporteurs qu'elle possède.</li>
    <li>Notre Design ne respecte pas complètement le Common Closure principle. Un changement dans Interface n'affecterait pas les 3 autres paquets, mais étant donné que Compagnie et Interface utilisent Destination et Reservation, il devient difficile de modifier ces 2 paquets sans affecter Interface et Compagnie. Ce serait comme espérer de changer la spécification de la classe String de Java sans affecter aucune autre classe.</li>
    
</body>
</html>
